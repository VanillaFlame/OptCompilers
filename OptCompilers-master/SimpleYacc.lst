
// ==========================================================================
//  GPPG error listing for yacc source file <SimpleYacc.y>
// ==========================================================================
//  Version:  1.3.6
//  Machine:  DESKTOP-0FGGHDS
//  DateTime: 3/10/2020 3:07:02 PM
//  UserName: annad
// ==========================================================================


%{
// Ýòè îáúÿâëåíèÿ äîáàâëÿþòñÿ â êëàññ GPPGParser, ïðåäñòàâëÿþùèé ñîáîé ïàðñåð, ãåíåðèðóåìûé ñèñòåìîé gppg
    public BlockNode root; // Êîðíåâîé óçåë ñèíòàêñè÷åñêîãî äåðåâà 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
%}

%output = SimpleYacc.cs

%union { 
			public double dVal; 
			public int iVal; 
			public bool bVal;
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
			public ListExprNode lNode;
       }

%using ProgramTree;

%namespace SimpleParser

%token BEGIN END FOR INTERVAL WHILE GOTO IF ELSE WRITE WRITE WRITELN READ ASSIGN SEMICOLON LBRACKET RBRACKET
%token MULTIPLICATE DIVIDE PLUS MINUS LESSTHAN GREATERTHAN LESSOREQUAL GREATEROREQUAL EQUAL AND OR COMMA NOT COLON
%token <iVal> INUM 
%token <dVal> RNUM
%token <bVal> BNUM 
%token <sVal> ID

%type <eVal> expr ident 
%type <stVal> assign statement for while func_call if goto gowhere
%type <blVal> stlist block
%type <lNode> exprlist

%%
// Error: NonTerminal symbol "SEMOCOLON" has no productions
// Warning: Terminating SEMOCOLON fixes the following size-1 NonTerminal set
   // {SEMOCOLON}
// Error: There are 1 non-terminating NonTerminal Symbols
   //  {SEMOCOLON}
// -------------------------------------------------------------------------

progr		: block { root = $1; }
			;

stlist		: statement 
				{ 
					$$ = new BlockNode($1); 
				}
			| stlist statement 
				{ 
					$1.Add($2); 
					$$ = $1; 
				}
			;

exprlist	: expr
				{ 
					$$ = new ListExprNode($1);
				}
			| exprlist COMMA expr
				{ 
					$1.Add($3); 
					$$ = $1; 
				}
			;

statement	: assign SEMICOLON	{ $$ = $1; }
			| block SEMICOLON	{ $$ = $1; }
			| for				{ $$ = $1; }
			| while				{ $$ = $1; }
			| goto SEMICOLON	{ $$ = $1; }
			| gowhere SEMOCOLON	{ $$ = $1; }
			| if				{ $$ = $1; }
			| func_call SEMICOLON	{ $$ = $1; }
		    ;

ident 		: ID { $$ = new IdNode($1); }	
			;
	
assign	 	: ident ASSIGN expr { $$ = new AssignNode($1 as IdNode, $3); }
			;

expr		: expr OR bool_t
			| bool_t
			;

bool_t		: bool_t AND bool_f
			| bool_f
			;

bool_f		: bool_f LESSTHAN a
			| bool_f GREATERTHAN a
			| bool_f LESSOREQUAL a
			| bool_f GREATEROREQUAL a
			| bool_f EQUAL a
			| a
			;

a			: a PLUS b
			| a MINUS b
			| b
			;

b			: b MULTIPLICATE c
			| b DIVIDE c
			| c
			;

c			: NOT d
			| MINUS d
			| d
			;

d			: INUM
			| RNUM
			| BNUM
			| ident
			| LBRACKET expr RBRACKET
			;

block		: BEGIN stlist END { $$ = $2; }
			;

for			: FOR ident ASSIGN expr INTERVAL expr block { $$ = new ForNode($2 as IdNode, $4, $6, $7); }
			;

while		: WHILE expr block { $$ = new WhileNode($2, $3); }
			;

goto		: GOTO INUM { $$ = new GotoNode($2); }
			;

gowhere		: INUM COLON statement { $$ = new GoWhereNode($1, $3); }
			;


if			: IF expr block { $$ = new IfNode($2, $3); }
			| IF expr block ELSE block { $$ = new IfNode($2, $3, $5); }
			;

func_call	: WRITE LBRACKET exprlist RBRACKET { $$ = new WriteNode($3 as ListExprNode, false); }
			| WRITELN LBRACKET exprlist RBRACKET { $$ = new WriteNode($3 as ListExprNode, true); }
			| READ LBRACKET ident RBRACKET { $$ = new ReadNode($3 as IdNode); }
			;
	
%%
// ==========================================================================

